name: Update Work Contributions

on:
  schedule:
    - cron: "0 0 * * *"   # 매일 자정 실행
  workflow_dispatch:       # 수동 실행도 가능

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Fetch contributions via GraphQL
        run: |
          curl -H "Authorization: bearer ${{ secrets.LEEJUNGJUN96_GH_TOKEN }}" \
               -X POST -d '{ "query": "query { user(login:\"leejungjun96\"){ contributionsCollection { contributionCalendar { totalContributions weeks { contributionDays { contributionCount date } } } } } }" }' \
               https://api.github.com/graphql > contributions.json

      - name: Convert JSON to SVG (GitHub-style heatmap)
        run: |
          python3 - <<'EOF'
          import json

          # JSON 불러오기
          data = json.load(open("contributions.json"))
          weeks = data["data"]["user"]["contributionsCollection"]["contributionCalendar"]["weeks"]

          # GitHub 스타일 색상 팔레트
          colors = [
              "#ebedf0",  # 0
              "#9be9a8",  # 1~4
              "#40c463",  # 5~9
              "#30a14e",  # 10~19
              "#216e39"   # 20+
          ]

          def get_color(count: int) -> str:
              if count == 0:
                  return colors[0]
              elif count < 5:
                  return colors[1]
              elif count < 10:
                  return colors[2]
              elif count < 20:
                  return colors[3]
              else:
                  return colors[4]

          # SVG 기본 세팅
          cell_size, gap = 10, 2
          width = len(weeks) * (cell_size + gap) + 50
          height = 7 * (cell_size + gap) + 40

          svg = [
              f'<svg xmlns="http://www.w3.org/2000/svg" width="{width}" height="{height}">',
              '<style>rect { shape-rendering: crispEdges; }</style>',
              '<g transform="translate(20,20)">'
          ]

          for wi, week in enumerate(weeks):
              for di, day in enumerate(week["contributionDays"]):
                  count = day["contributionCount"]
                  color = get_color(count)
                  x = wi * (cell_size + gap)
                  y = di * (cell_size + gap)
                  svg.append(f'<rect x="{x}" y="{y}" width="{cell_size}" height="{cell_size}" fill="{color}"/>')

          svg.append("</g></svg>")

          with open("contributions.svg", "w") as f:
              f.write("\n".join(svg))
          EOF

      - name: Commit & Push
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add contributions.svg
          git commit -m "Update contributions chart" || echo "No changes"
          git push
