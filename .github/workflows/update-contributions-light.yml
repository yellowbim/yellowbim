name: Update Work Contributions (Dark & Light)

on:
  schedule:
    - cron: "0 0 * * *"   # 매일 자정 실행
  workflow_dispatch:       # 수동 실행 가능

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # 리포에 push 권한

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Fetch contributions via GraphQL
        run: |
          curl -s -H "Authorization: bearer ${{ secrets.LEEJUNGJUN96_GH_TOKEN }}" \
               -X POST -d '{ "query": "query { user(login:\"leejungjun96\"){ contributionsCollection { contributionCalendar { totalContributions weeks { contributionDays { date contributionCount } } } } } }" }' \
               https://api.github.com/graphql > contributions.json

      - name: Convert JSON to Dark SVG
        run: |
          python3 - <<'EOF'
          import json, datetime
          colors = ["#161b22", "#0e4429", "#006d32", "#26a641", "#39d353"]  # GitHub 다크
          with open("contributions.json") as f:
              data = json.load(f)
          weeks = data["data"]["user"]["contributionsCollection"]["contributionCalendar"]["weeks"]
          cell_size, gap = 11, 2
          width = len(weeks) * (cell_size + gap) + 40
          height = 7 * (cell_size + gap) + 30
          svg = [
              f'<svg xmlns="http://www.w3.org/2000/svg" width="{width}" height="{height}" style="background-color:#0d1117">',
              '<style>text{font-family:Arial,Helvetica,sans-serif;font-size:10px;fill:#8b949e;}</style>'
          ]
          for i, label in enumerate(["Mon","Wed","Fri"]):
              y = (i*2+1) * (cell_size + gap) + 20
              svg.append(f'<text x="2" y="{y}">{label}</text>')
          months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
          for x, week in enumerate(weeks):
              first_day = datetime.date.fromisoformat(week["contributionDays"][0]["date"])
              if first_day.day <= 7:
                  svg.append(f'<text x="{x*(cell_size+gap)+25}" y="12">{months[first_day.month-1]}</text>')
          for x, week in enumerate(weeks):
              for y, day in enumerate(week["contributionDays"]):
                  c = day["contributionCount"]
                  if c == 0: color = colors[0]
                  elif c < 5: color = colors[1]
                  elif c < 10: color = colors[2]
                  elif c < 20: color = colors[3]
                  else: color = colors[4]
                  rect_x, rect_y = x*(cell_size+gap)+25, y*(cell_size+gap)+20
                  svg.append(f'<rect x="{rect_x}" y="{rect_y}" width="{cell_size}" height="{cell_size}" fill="{color}" rx="2" ry="2"/>')
          legend_x, legend_y = 25, height - 5
          svg.append(f'<text x="{legend_x}" y="{legend_y}">Less</text>')
          for i, c in enumerate(colors[1:], start=0):
              svg.append(f'<rect x="{legend_x+30+i*(cell_size+gap)}" y="{legend_y-10}" width="{cell_size}" height="{cell_size}" fill="{c}" rx="2" ry="2"/>')
          svg.append(f'<text x="{legend_x+30+5*(cell_size+gap)}" y="{legend_y}">More</text>')
          svg.append("</svg>")
          with open("contributions-dark.svg", "w") as f:
              f.write("\n".join(svg))
          EOF

      - name: Convert JSON to Light SVG
        run: |
          python3 - <<'EOF'
          import json, datetime
          colors = ["#ebedf0", "#9be9a8", "#40c463", "#30a14e", "#216e39"]  # GitHub 라이트
          with open("contributions.json") as f:
              data = json.load(f)
          weeks = data["data"]["user"]["contributionsCollection"]["contributionCalendar"]["weeks"]
          cell_size, gap = 11, 2
          width = len(weeks) * (cell_size + gap) + 40
          height = 7 * (cell_size + gap) + 30
          svg = [
              f'<svg xmlns="http://www.w3.org/2000/svg" width="{width}" height="{height}" style="background-color:#ffffff">',
              '<style>text{font-family:Arial,Helvetica,sans-serif;font-size:10px;fill:#57606a;}</style>'
          ]
          for i, label in enumerate(["Mon","Wed","Fri"]):
              y = (i*2+1) * (cell_size + gap) + 20
              svg.append(f'<text x="2" y="{y}">{label}</text>')
          months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
          for x, week in enumerate(weeks):
              first_day = datetime.date.fromisoformat(week["contributionDays"][0]["date"])
              if first_day.day <= 7:
                  svg.append(f'<text x="{x*(cell_size+gap)+25}" y="12">{months[first_day.month-1]}</text>')
          for x, week in enumerate(weeks):
              for y, day in enumerate(week["contributionDays"]):
                  c = day["contributionCount"]
                  if c == 0: color = colors[0]
                  elif c < 5: color = colors[1]
                  elif c < 10: color = colors[2]
                  elif c < 20: color = colors[3]
                  else: color = colors[4]
                  rect_x, rect_y = x*(cell_size+gap)+25, y*(cell_size+gap)+20
                  svg.append(f'<rect x="{rect_x}" y="{rect_y}" width="{cell_size}" height="{cell_size}" fill="{color}" rx="2" ry="2"/>')
          legend_x, legend_y = 25, height - 5
          svg.append(f'<text x="{legend_x}" y="{legend_y}">Less</text>')
          for i, c in enumerate(colors[1:], start=0):
              svg.append(f'<rect x="{legend_x+30+i*(cell_size+gap)}" y="{legend_y-10}" width="{cell_size}" height="{cell_size}" fill="{c}" rx="2" ry="2"/>')
          svg.append(f'<text x="{legend_x+30+5*(cell_size+gap)}" y="{legend_y}">More</text>')
          svg.append("</svg>")
          with open("contributions-light.svg", "w") as f:
              f.write("\n".join(svg))
          EOF

      - name: Commit & Push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add contributions-dark.svg contributions-light.svg
          git commit -m "Update contributions charts (dark & light)" || echo "No changes"
          git push
